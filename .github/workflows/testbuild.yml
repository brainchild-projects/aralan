name: test-build

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v2

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: commitlint
    outputs:
      branch: ${{ steps.branchinfo.outputs.branch }}

    steps:

      - uses: nelonoel/branch-name@v1.0.1

      - name: Store the branch name
        id: branchinfo
        run: echo "::set-output name=branch::${BRANCH_NAME}"

      - name: Check if we were able to save branch info
        run: echo ${{ steps.branchinfo.outputs.branch }}

      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.5.1'
          channel: 'stable'

      - uses: actions/checkout@v2

      - name: Get dependencies
        run: flutter pub get

      - name: Check dart formatting
        run: dart format --set-exit-if-changed .

      - name: Statically analyze the Dart code for any errors.
        run: dart analyze .

      - name: Run Tests with coverage
        run: flutter test --coverage

      - name: Upload coverage
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage/lcov.info

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.outputs.branch == 'main' }}

    steps:
      - run: echo ${{ needs.test.outputs.branch }}

      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.5.1'
          channel: 'stable'

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get dependencies
        run: flutter pub get

      - name: Prepare release
        run: |
          head pubspec.yaml
          flutter pub run release_tools prepare_release -w
          head pubspec.yaml
          cat VERSION.txt

      - name: Get Release Info
        id: releaseInfo
        run: |
          if [ -e VERSION.txt ]
          then
            shouldRelease="yes"
            cat pubspec.yaml
            releaseVersion=$(cat VERSION.txt)
            echo "::set-output name=version::${releaseVersion}"
            echo $releaseVersion
            echo "$releaseSummary"
          else
            shouldRelease="false"
          fi
          echo "::set-output name=shouldRelease::${shouldRelease}"

      - name: Create key.properties
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > app/upload-keystore.jks
          echo "keyPassword=$ANDROID_KEYSTORE_KEYPASS" >> key.properties
          echo "storePassword=$ANDROID_KEYSTORE_STOREPASS" >> key.properties
          echo "keyAlias=$ANDROID_KEYSTORE_ALIAS" >> key.properties
          storePath="$(pwd)/app/upload-keystore.jks"
          echo "storeFile=$storePath" >> key.properties
          ls -ld app/upload-keystore.jks
        working-directory: android
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_KEYPASS: ${{ secrets.ANDROID_KEYSTORE_KEYPASS }}
          ANDROID_KEYSTORE_STOREPASS: ${{ secrets.ANDROID_KEYSTORE_STOREPASS }}
          ANDROID_KEYSTORE_ALIAS: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}

      - name: Build apk
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: flutter build apk

      - name: Build bundle
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: flutter build appbundle

      - name: Setup Ruby
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Cache bundle dependencies
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-gems-

      - name: Download bundle dependencies
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: |
          gem install bundler:2.0.2
          bundle config path vendor/bundle
          bundle install

      - name: Release to Google Play (beta)
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        env:
          SUPPLY_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME }}
          SUPPLY_JSON_KEY_DATA: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        run: |
          bundle exec fastlane android supply \
          --aab build/app/outputs/bundle/release/app-release.aab \
          --track internal
          --release_status draft

      - name: Commit Release
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: |
          git diff
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "chore(release): release for ${{ steps.nextVersion.outputs.value }}"
          git push

      - name: Create Release
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_SUMMARY.txt
          tag_name: ${{ steps.releaseInfo.outputs.version }}
          files: |
            build/app/outputs/apk/release/app-release.apk
