name: test-build

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v2

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: commitlint
    outputs:
      branch: ${{ steps.branchinfo.outputs.branch }}

    steps:

      - uses: nelonoel/branch-name@v1.0.1

      - name: Store the branch name
        id: branchinfo
        run: echo "::set-output name=branch::${BRANCH_NAME}"

      - name: Check if we were able to save branch info
        run: echo ${{ steps.branchinfo.outputs.branch }}

      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.5.1'
          channel: 'stable'

      - uses: actions/checkout@v2

      - name: Get dependencies
        run: flutter pub get

      - name: Check dart formatting
        run: dart format --set-exit-if-changed .

      - name: Statically analyze the Dart code for any errors.
        run: dart analyze .

      - name: Run Tests with coverage
        run: flutter test --coverage

      - name: Upload coverage
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage/lcov.info

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.outputs.branch == 'main' }}

    steps:
      - run: echo ${{ needs.test.outputs.branch }}

      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.5.1'
          channel: 'stable'

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get dependencies
        run: flutter pub get

      - name: Prepare release
        run: |
          flutter pub run release_tools prepare_release -w
          ls -la

      - name: Get Release Info
        id: releaseInfo
        run: |
          if [ -e VERSION.txt ]
          then
            shouldRelease="yes"
            releaseVersion=`cat VERSION.txt`
            releaseSummary=`cat RELEASE_SUMMARY.txt`
            echo "::set-output name=version::${releaseVersion}"
            echo "::set-output name=summary::${releaseSummary}"
          else
            shouldRelease="false"
          fi
          echo "::set-output name=shouldRelease::${shouldRelease}"

      - name: Commit Release
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: |
          git diff
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "chore(release): release for ${{ steps.nextVersion.outputs.value }}"
          git push

      - name: Create Release
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        id: createRelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.nextVersion.outputs.value }}
          release_name: Release ${{ steps.nextVersion.outputs.value }}
          body: |
            Changes in this Release

            ${{ steps.changelog.outputs.summary }}

          draft: false
          prerelease: false

      - name: Build apk.
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: flutter build apk

      - name: Upload generated apk to the artifacts.
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        uses: actions/upload-artifact@v1
        with:
           name: release-apk
           path: build/app/outputs/apk/release/app-release.apk